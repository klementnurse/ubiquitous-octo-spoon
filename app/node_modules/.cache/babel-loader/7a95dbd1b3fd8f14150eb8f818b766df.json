{"ast":null,"code":"import { parsePhoneNumber } from 'libphonenumber-js';\n/**\n * Validate a phone number with libphonenumber-js.\n *\n * @param {string} phone international phone number, can include formatting\n * @param {array} [countryCodes=[]] optionally limit phone number to these country codes\n *                                  @see https://en.wikipedia.org/wiki/List_of_country_calling_codes\n * @returns {boolean} is the phone number valid\n */\n\nexport var validateInternationalPhone = function validateInternationalPhone(phone) {\n  var acceptedCountryCodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var phoneToValidate = phone.trim();\n\n  if (phoneToValidate[0] !== '+') {\n    phoneToValidate = \"+\".concat(phoneToValidate);\n  }\n\n  var parsed;\n\n  try {\n    parsed = parsePhoneNumber(phoneToValidate);\n  } catch (error) {\n    return false;\n  }\n\n  if (!parsed.isValid()) {\n    return false;\n  } // Check the number against an optional list of accepted country codes.\n\n\n  if (acceptedCountryCodes.length && (!parsed.country || !acceptedCountryCodes.map(function (code) {\n    return code.toUpperCase();\n  }).includes(parsed.country.toUpperCase()))) {\n    return false;\n  }\n\n  return true;\n};","map":{"version":3,"sources":["/Users/matthew/Desktop/static/app/src/utils/validate-international-phone.ts"],"names":["parsePhoneNumber","validateInternationalPhone","phone","acceptedCountryCodes","phoneToValidate","trim","parsed","error","isValid","length","country","map","code","toUpperCase","includes"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,mBAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CACxCC,KADwC,EAGrC;AAAA,MADHC,oBACG,uEAD8B,EAC9B;AACH,MAAIC,eAAe,GAAGF,KAAK,CAACG,IAAN,EAAtB;;AACA,MAAID,eAAe,CAAC,CAAD,CAAf,KAAuB,GAA3B,EAAgC;AAC9BA,IAAAA,eAAe,cAAOA,eAAP,CAAf;AACD;;AACD,MAAIE,MAAJ;;AAEA,MAAI;AACFA,IAAAA,MAAM,GAAGN,gBAAgB,CAACI,eAAD,CAAzB;AACD,GAFD,CAEE,OAAOG,KAAP,EAAc;AACd,WAAO,KAAP;AACD;;AAED,MAAI,CAACD,MAAM,CAACE,OAAP,EAAL,EAAuB;AACrB,WAAO,KAAP;AACD,GAfE,CAiBH;;;AACA,MACEL,oBAAoB,CAACM,MAArB,KACC,CAACH,MAAM,CAACI,OAAR,IACC,CAACP,oBAAoB,CAClBQ,GADF,CACM,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACC,WAAL,EAAJ;AAAA,GADV,EAEEC,QAFF,CAEWR,MAAM,CAACI,OAAP,CAAeG,WAAf,EAFX,CAFH,CADF,EAME;AACA,WAAO,KAAP;AACD;;AAED,SAAO,IAAP;AACD,CAhCM","sourcesContent":["import { parsePhoneNumber } from 'libphonenumber-js'\n\n/**\n * Validate a phone number with libphonenumber-js.\n *\n * @param {string} phone international phone number, can include formatting\n * @param {array} [countryCodes=[]] optionally limit phone number to these country codes\n *                                  @see https://en.wikipedia.org/wiki/List_of_country_calling_codes\n * @returns {boolean} is the phone number valid\n */\nexport const validateInternationalPhone = (\n  phone: string,\n  acceptedCountryCodes: string[] = []\n) => {\n  let phoneToValidate = phone.trim()\n  if (phoneToValidate[0] !== '+') {\n    phoneToValidate = `+${phoneToValidate}`\n  }\n  let parsed\n\n  try {\n    parsed = parsePhoneNumber(phoneToValidate)\n  } catch (error) {\n    return false\n  }\n\n  if (!parsed.isValid()) {\n    return false\n  }\n\n  // Check the number against an optional list of accepted country codes.\n  if (\n    acceptedCountryCodes.length &&\n    (!parsed.country ||\n      !acceptedCountryCodes\n        .map(code => code.toUpperCase())\n        .includes(parsed.country.toUpperCase()))\n  ) {\n    return false\n  }\n\n  return true\n}\n"]},"metadata":{},"sourceType":"module"}