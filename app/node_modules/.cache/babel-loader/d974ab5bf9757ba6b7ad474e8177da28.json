{"ast":null,"code":"import _regeneratorRuntime from \"/Users/matthew/Desktop/static/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/matthew/Desktop/static/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/matthew/Desktop/static/app/src/components/landing/Landing.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect } from 'react';\nimport { useLocation, useParams, useHistory } from 'react-router-dom';\nimport qs from 'qs';\nimport Spinner from '../common/Spinner';\nimport { OptoutType } from '../../contracts';\nimport ErrorMessage from './ErrorMessage';\nimport LandingForm from './LandingForm';\nimport { useLandingData } from './useLandingData';\nimport * as Sentry from '@sentry/browser';\nimport { validateEmail, validateInternationalPhone } from '../../utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/**\n * Load critical path data (campaign mailer, page data) for opting-out, and processes\n * opt-out submissions.\n *\n * If the critical path data cannot be loaded a basic fallback form is displayed,\n * which captures opt-outs to Sentry.\n *\n * This is the only component that is currently capable of loading the required\n * data, as has access to the legacy key (MAK) required by the data endpoints.\n */\nvar Landing = function Landing() {\n  _s();\n\n  var history = useHistory();\n\n  var _useParams = useParams(),\n      legacyKey = _useParams.legacyKey;\n\n  var location = useLocation();\n\n  var _useLandingData = useLandingData(legacyKey),\n      campaignMailer = _useLandingData.campaignMailer,\n      submitOptout = _useLandingData.submitOptout,\n      hasLoaded = _useLandingData.hasLoaded,\n      submitting = _useLandingData.submitting,\n      fatalError = _useLandingData.fatalError;\n\n  var query = qs.parse(location.search, {\n    ignoreQueryPrefix: true\n  });\n  var oneClickOptout = query.email;\n  var submit = useCallback( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(email, sms, preference) {\n      var _yield$submitOptout, collectFeedback, showAd;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return submitOptout(email, sms, preference);\n\n            case 2:\n              _yield$submitOptout = _context.sent;\n              collectFeedback = _yield$submitOptout.collectFeedback;\n              showAd = _yield$submitOptout.showAd;\n\n              /* We always redirect to the confirmation page, regardless of whether the\n              request succeeded or not. */\n              history.push({\n                pathname: '/confirmation',\n                state: {\n                  email: email,\n                  sms: sms,\n                  showAd: showAd,\n                  collectFeedback: collectFeedback\n                }\n              });\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }(), [history, submitOptout]);\n  /* The one-click opt-out feature discards invalid opt-outs. Because we do not surface\n  submission errors back to the end user, it is the responsibility of our clients\n  to ensure one-click opt-outs are correct. */\n\n  useEffect(function () {\n    var optoutType = (campaignMailer === null || campaignMailer === void 0 ? void 0 : campaignMailer.optoutType) || OptoutType.Email;\n\n    if (oneClickOptout && hasLoaded && !fatalError) {\n      // Validate one-click opt-out.\n      var isValid = optoutType === OptoutType.Email && validateEmail(oneClickOptout.toString()) || optoutType === OptoutType.SMS && validateInternationalPhone(oneClickOptout.toString());\n\n      if (isValid) {\n        // Submit valid opt-out\n        submit(optoutType === OptoutType.Email ? oneClickOptout : '', optoutType === OptoutType.SMS ? oneClickOptout : '', []);\n      } else if (campaignMailer) {\n        /* Discard invalid opt-out and log relevant info to Sentry.\n        User is then presented with the manual opt-out page.\n        Logging when there is no campaign mailer is handled by useLandingData. */\n        var campaignId = campaignMailer.campaignId,\n            mailerId = campaignMailer.mailerId,\n            cmaId = campaignMailer.cmaId,\n            sourceClientId = campaignMailer.sourceClientId,\n            _optoutType = campaignMailer.optoutType;\n        Sentry.captureMessage('Invalid one-click opt-out discarded', {\n          contexts: {\n            'discarded one-click opt-out': {\n              oneClickOptout: oneClickOptout,\n              campaignId: campaignId,\n              mailerId: mailerId,\n              cmaId: cmaId,\n              sourceClientId: sourceClientId,\n              optoutType: _optoutType\n            }\n          }\n        });\n      }\n    }\n  }, [oneClickOptout, campaignMailer, submit, hasLoaded, fatalError]);\n\n  var handleSubmit = function handleSubmit(email, sms, preference) {\n    submit(email, sms, preference);\n  };\n\n  if (fatalError) {\n    return /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      message: fatalError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 12\n    }, _this);\n  }\n\n  if (!hasLoaded) {\n    return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 12\n    }, _this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(LandingForm, {\n    submitting: submitting,\n    onSubmit: handleSubmit\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 10\n  }, _this);\n};\n\n_s(Landing, \"EAS4y6ABjH7LZ7AeX3lAufW88GE=\", false, function () {\n  return [useHistory, useParams, useLocation, useLandingData];\n});\n\n_c = Landing;\nexport default Landing;\n\nvar _c;\n\n$RefreshReg$(_c, \"Landing\");","map":{"version":3,"sources":["/Users/matthew/Desktop/static/app/src/components/landing/Landing.tsx"],"names":["useCallback","useEffect","useLocation","useParams","useHistory","qs","Spinner","OptoutType","ErrorMessage","LandingForm","useLandingData","Sentry","validateEmail","validateInternationalPhone","Landing","history","legacyKey","location","campaignMailer","submitOptout","hasLoaded","submitting","fatalError","query","parse","search","ignoreQueryPrefix","oneClickOptout","email","submit","sms","preference","collectFeedback","showAd","push","pathname","state","optoutType","Email","isValid","toString","SMS","campaignId","mailerId","cmaId","sourceClientId","captureMessage","contexts","handleSubmit"],"mappings":"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","sourcesContent":["import { useCallback, useEffect } from 'react'\nimport { useLocation, useParams, useHistory } from 'react-router-dom'\nimport qs from 'qs'\nimport Spinner from '../common/Spinner'\nimport { OptoutType } from '../../contracts'\nimport ErrorMessage from './ErrorMessage'\nimport LandingForm from './LandingForm'\nimport { useLandingData } from './useLandingData'\nimport * as Sentry from '@sentry/browser'\nimport { validateEmail, validateInternationalPhone } from '../../utils'\n\ninterface LandingPageParams {\n  /**\n   * Opt-out key in the legacy format.\n   * TODO: Discover what makes this a legacy key vs whatever is not legacy.\n   */\n  legacyKey: string\n}\n\nexport interface LandingPageProps {}\n\n/**\n * Load critical path data (campaign mailer, page data) for opting-out, and processes\n * opt-out submissions.\n *\n * If the critical path data cannot be loaded a basic fallback form is displayed,\n * which captures opt-outs to Sentry.\n *\n * This is the only component that is currently capable of loading the required\n * data, as has access to the legacy key (MAK) required by the data endpoints.\n */\nconst Landing = () => {\n  const history = useHistory()\n  const { legacyKey } = useParams<LandingPageParams>()\n  const location = useLocation()\n  const { campaignMailer, submitOptout, hasLoaded, submitting, fatalError } =\n    useLandingData(legacyKey)\n  const query = qs.parse(location.search, { ignoreQueryPrefix: true })\n  const oneClickOptout = query.email\n\n  const submit = useCallback(\n    async (email: string, sms: string, preference: number[]) => {\n      const { collectFeedback, showAd } = await submitOptout(\n        email,\n        sms,\n        preference\n      )\n\n      /* We always redirect to the confirmation page, regardless of whether the\n      request succeeded or not. */\n      history.push({\n        pathname: '/confirmation',\n        state: {\n          email,\n          sms,\n          showAd,\n          collectFeedback\n        }\n      })\n    },\n    [history, submitOptout]\n  )\n\n  /* The one-click opt-out feature discards invalid opt-outs. Because we do not surface\n  submission errors back to the end user, it is the responsibility of our clients\n  to ensure one-click opt-outs are correct. */\n  useEffect(() => {\n    const optoutType = campaignMailer?.optoutType || OptoutType.Email\n\n    if (oneClickOptout && hasLoaded && !fatalError) {\n      // Validate one-click opt-out.\n      const isValid =\n        (optoutType === OptoutType.Email &&\n          validateEmail(oneClickOptout.toString())) ||\n        (optoutType === OptoutType.SMS &&\n          validateInternationalPhone(oneClickOptout.toString()))\n\n      if (isValid) {\n        // Submit valid opt-out\n        submit(\n          optoutType === OptoutType.Email ? (oneClickOptout as string) : '',\n          optoutType === OptoutType.SMS ? (oneClickOptout as string) : '',\n          []\n        )\n      } else if (campaignMailer) {\n        /* Discard invalid opt-out and log relevant info to Sentry.\n        User is then presented with the manual opt-out page.\n        Logging when there is no campaign mailer is handled by useLandingData. */\n        const { campaignId, mailerId, cmaId, sourceClientId, optoutType } =\n          campaignMailer\n        Sentry.captureMessage('Invalid one-click opt-out discarded', {\n          contexts: {\n            'discarded one-click opt-out': {\n              oneClickOptout,\n              campaignId,\n              mailerId,\n              cmaId,\n              sourceClientId,\n              optoutType\n            }\n          }\n        })\n      }\n    }\n  }, [oneClickOptout, campaignMailer, submit, hasLoaded, fatalError])\n\n  const handleSubmit = (email: string, sms: string, preference: number[]) => {\n    submit(email, sms, preference)\n  }\n\n  if (fatalError) {\n    return <ErrorMessage message={fatalError} />\n  }\n\n  if (!hasLoaded) {\n    return <Spinner />\n  }\n\n  return <LandingForm submitting={submitting} onSubmit={handleSubmit} />\n}\n\nexport default Landing\n"]},"metadata":{},"sourceType":"module"}