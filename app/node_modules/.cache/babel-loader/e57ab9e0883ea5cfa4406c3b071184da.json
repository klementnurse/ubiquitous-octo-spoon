{"ast":null,"code":"import _regeneratorRuntime from \"/Users/matthew/Desktop/static/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/matthew/Desktop/static/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/matthew/Desktop/static/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/matthew/Desktop/static/app/src/components/landing/useLandingData.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from 'react';\nimport retry from 'async-retry';\nimport * as Sentry from '@sentry/browser';\nimport { useAppContext } from '../../contexts/AppContext';\nimport { OptoutType, ServerUnavailableError } from '../../contracts';\nimport { verifyKey } from '../../services/legacy';\nimport { fetchPageData, submitOptout } from '../../services/optout';\nimport config from '../../config';\nimport NotFound from '../common/NotFound';\nimport { generateDefaultPageData } from '../../utils';\nimport { fallbackToApiProxy } from '../../initAxios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar CREATIVE_COLLECTION_RATIO = 0.4;\n/**\n * Calculate whether to collect creative feedback for an email address.\n * This is deterministic.\n */\n\nvar whetherCollect = function whetherCollect(email) {\n  var _email$split = email.split('@'),\n      _email$split2 = _slicedToArray(_email$split, 2),\n      name = _email$split2[0],\n      org = _email$split2[1];\n\n  if (!org.match(/^(yahoo|gmail|hotmail|live|aol|optestmo)/i)) {\n    return false;\n  }\n\n  if (name === 'testclb') {\n    return true;\n  }\n\n  if (name === 'testnotclb') {\n    return false;\n  } // Non-deterministic. Use shortcut email names above for testing.\n\n\n  return Math.random() < CREATIVE_COLLECTION_RATIO;\n};\n/**\n * Calculate whether we should redirect to ads.\n * This is not deterministic.\n */\n\n\nexport var whetherShowAd = function whetherShowAd(ratio) {\n  return Math.random() < ratio;\n};\n/**\n * As a last resort, capture an attempted Opt-Out to Sentry. At the very least we\n * will have the optout and the key (MAK). If the CampaignMailer was fetched, we\n * will have all the data required to easily replay the Opt-Out.\n */\n\nvar captureFailedSubmissionToSentry = function captureFailedSubmissionToSentry(key, message, emailOptout, smsOptout, campaignId, mailerId, cmaId) {\n  Sentry.captureMessage(\"Sentry Opt-Out Collection - \".concat(message), {\n    contexts: {\n      'attempted optout': {\n        emailOptout: emailOptout,\n        smsOptout: smsOptout,\n        key: key,\n        campaignId: campaignId,\n        mailerId: mailerId,\n        cmaId: cmaId\n      }\n    }\n  });\n};\n\n/**\n * Hook extracting data fetching/saving logic to improve the readability of\n * the <Landing /> component.\n * Technically any component can use this if it has access to a key (MAK).\n */\nexport var useLandingData = function useLandingData(key) {\n  _s();\n\n  var _useAppContext = useAppContext(),\n      campaignMailer = _useAppContext.campaignMailer,\n      pageData = _useAppContext.pageData,\n      setCampaignMailer = _useAppContext.setCampaignMailer,\n      setPageData = _useAppContext.setPageData;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      submitting = _useState2[0],\n      setSubmitting = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      campaignMailerLoading = _useState4[0],\n      setCampaignMailerLoading = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      campaignMailerHasLoaded = _useState6[0],\n      setCampaignMailerHasLoaded = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      campaignMailerError = _useState8[0],\n      setCampaignMailerError = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      pageDataLoading = _useState10[0],\n      setPageDataLoading = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      pageDataHasLoaded = _useState12[0],\n      setPageDataHasLoaded = _useState12[1];\n\n  var _useState13 = useState(),\n      _useState14 = _slicedToArray(_useState13, 2),\n      pageDataError = _useState14[0],\n      setPageDataError = _useState14[1];\n\n  useEffect(function () {\n    if (campaignMailer) {\n      setCampaignMailerHasLoaded(true);\n      return;\n    }\n\n    var fetchData = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var fallbackAttempts, totalAttempts, result;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                setCampaignMailerLoading(true);\n                fallbackAttempts = 3;\n                totalAttempts = config.requestRetries + fallbackAttempts;\n                Sentry.setContext('api_fallback', {\n                  fallback: false\n                });\n                _context2.prev = 4;\n                _context2.next = 7;\n                return retry( /*#__PURE__*/function () {\n                  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(bail, attempt) {\n                    var isFallbackAttempt;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            // 'attempt' is indexed from 1\n                            isFallbackAttempt = attempt > config.requestRetries;\n\n                            if (isFallbackAttempt) {\n                              fallbackToApiProxy();\n                              Sentry.setContext('api_fallback', {\n                                fallback: true\n                              });\n                            }\n\n                            _context.prev = 2;\n                            _context.next = 5;\n                            return verifyKey(key);\n\n                          case 5:\n                            return _context.abrupt(\"return\", _context.sent);\n\n                          case 8:\n                            _context.prev = 8;\n                            _context.t0 = _context[\"catch\"](2);\n\n                            if (_context.t0 instanceof ServerUnavailableError) {\n                              _context.next = 13;\n                              break;\n                            }\n\n                            bail(_context.t0);\n                            return _context.abrupt(\"return\");\n\n                          case 13:\n                            throw _context.t0;\n\n                          case 14:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee, null, [[2, 8]]);\n                  }));\n\n                  return function (_x, _x2) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }(), {\n                  maxTimeout: config.requestTimeout,\n                  retries: totalAttempts\n                });\n\n              case 7:\n                result = _context2.sent;\n\n                if (result) {\n                  setCampaignMailer(result);\n                }\n\n                _context2.next = 14;\n                break;\n\n              case 11:\n                _context2.prev = 11;\n                _context2.t0 = _context2[\"catch\"](4);\n\n                if (!(_context2.t0 instanceof ServerUnavailableError)) {\n                  setCampaignMailerError( /*#__PURE__*/_jsxDEV(NotFound, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 198,\n                    columnNumber: 34\n                  }, _this));\n                }\n\n              case 14:\n                _context2.prev = 14;\n                setCampaignMailerLoading(false);\n                setCampaignMailerHasLoaded(true);\n                return _context2.finish(14);\n\n              case 18:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[4, 11, 14, 18]]);\n      }));\n\n      return function fetchData() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchData();\n  }, [key, campaignMailer, setCampaignMailer]);\n  useEffect(function () {\n    if (pageData) {\n      setPageDataHasLoaded(true);\n      return;\n    }\n    /* This request is dependant on the Campaign Mailer token. We need to wait for\n    it to either load and succeed, or fail so we can fall back to default page data. */\n\n\n    if (!campaignMailerHasLoaded) {\n      return;\n    }\n\n    if (!campaignMailer) {\n      // Without a Campaign Mailer we default to Email optouts.\n      setPageData(generateDefaultPageData(OptoutType.Email));\n      setPageDataHasLoaded(true);\n      return;\n    }\n\n    var fetchData = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                setPageDataLoading(true);\n                _context3.prev = 1;\n                _context3.next = 4;\n                return fetchPageData(campaignMailer.campaignId, campaignMailer.optoutType);\n\n              case 4:\n                result = _context3.sent;\n                setPageData(result);\n                _context3.next = 11;\n                break;\n\n              case 8:\n                _context3.prev = 8;\n                _context3.t0 = _context3[\"catch\"](1);\n                setPageDataError('This opt-out link is no longer active');\n\n              case 11:\n                _context3.prev = 11;\n                setPageDataLoading(false);\n                setPageDataHasLoaded(true);\n                return _context3.finish(11);\n\n              case 15:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[1, 8, 11, 15]]);\n      }));\n\n      return function fetchData() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    fetchData();\n  }, [campaignMailer, campaignMailerHasLoaded, pageData, setPageData]);\n  var submit = useCallback( /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(email, sms, preference) {\n      var campaignId, mailerId, cmaId, optoutAdRatio, sourceClientId, optoutType, showAd, collectFeedback;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              setSubmitting(true);\n\n              if (campaignMailer) {\n                _context5.next = 4;\n                break;\n              }\n\n              /* If the Campaign Mailer has failed to load, immediately fall back capturing\n              the opt-out via Sentry. We cannot use submitOptout() as the contract expects\n              data we cannot provide. */\n              captureFailedSubmissionToSentry(key, 'Opt-Out key failed to load', // Without a Campaign Mailer we are assumed to be collecting Email addresses.\n              email);\n              return _context5.abrupt(\"return\", {\n                showAd: false,\n                collectFeedback: false\n              });\n\n            case 4:\n              campaignId = campaignMailer.campaignId, mailerId = campaignMailer.mailerId, cmaId = campaignMailer.cmaId, optoutAdRatio = campaignMailer.optoutAdRatio, sourceClientId = campaignMailer.sourceClientId, optoutType = campaignMailer.optoutType;\n              showAd = whetherShowAd(optoutAdRatio);\n              _context5.prev = 6;\n              _context5.next = 9;\n              return retry( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n                return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                  while (1) {\n                    switch (_context4.prev = _context4.next) {\n                      case 0:\n                        _context4.next = 2;\n                        return submitOptout(campaignId, {\n                          mailerId: mailerId,\n                          email: optoutType === OptoutType.Email ? email : undefined,\n                          sms: optoutType === OptoutType.SMS ? sms : undefined,\n                          cmaId: cmaId,\n                          preference: preference,\n                          sourceClientId: sourceClientId,\n                          wasRedirectedToAds: showAd\n                        });\n\n                      case 2:\n                      case \"end\":\n                        return _context4.stop();\n                    }\n                  }\n                }, _callee4);\n              })), {\n                maxTimeout: config.requestTimeout,\n                retries: config.requestRetries,\n                onRetry: function onRetry(error) {\n                  Sentry.captureException(error);\n                }\n              });\n\n            case 9:\n              _context5.next = 16;\n              break;\n\n            case 11:\n              _context5.prev = 11;\n              _context5.t0 = _context5[\"catch\"](6);\n\n              /* From the user's point of view an optout request will ALWAYS succeed i.e.\n              errors are handled silently. */\n              console.error(_context5.t0);\n              Sentry.captureException(_context5.t0);\n              captureFailedSubmissionToSentry(key, 'submitOptout() failed to complete request', email, sms, campaignId, mailerId, cmaId);\n\n            case 16:\n              _context5.prev = 16;\n              setSubmitting(false);\n              return _context5.finish(16);\n\n            case 19:\n              collectFeedback = !showAd && optoutType === OptoutType.Email && whetherCollect(email);\n              return _context5.abrupt(\"return\", {\n                showAd: showAd,\n                collectFeedback: collectFeedback\n              });\n\n            case 21:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, null, [[6, 11, 16, 19]]);\n    }));\n\n    return function (_x3, _x4, _x5) {\n      return _ref4.apply(this, arguments);\n    };\n  }(), [key, campaignMailer]);\n  return {\n    loading: campaignMailerLoading || pageDataLoading,\n    hasLoaded: campaignMailerHasLoaded && pageDataHasLoaded,\n    // Campaign Mailer error takes precedence over a Page Data error.\n    fatalError: campaignMailerError || pageDataError,\n    submitting: submitting,\n    campaignMailer: campaignMailer,\n    pageData: pageData,\n    submitOptout: submit\n  };\n};\n\n_s(useLandingData, \"ZZ6Ui8QGD1P81y/tB/ZYcKPnPMo=\", false, function () {\n  return [useAppContext];\n});","map":{"version":3,"sources":["/Users/matthew/Desktop/static/app/src/components/landing/useLandingData.tsx"],"names":["useCallback","useEffect","useState","retry","Sentry","useAppContext","OptoutType","ServerUnavailableError","verifyKey","fetchPageData","submitOptout","config","NotFound","generateDefaultPageData","fallbackToApiProxy","CREATIVE_COLLECTION_RATIO","whetherCollect","email","split","name","org","match","Math","random","whetherShowAd","ratio","captureFailedSubmissionToSentry","key","message","emailOptout","smsOptout","campaignId","mailerId","cmaId","captureMessage","contexts","useLandingData","campaignMailer","pageData","setCampaignMailer","setPageData","submitting","setSubmitting","campaignMailerLoading","setCampaignMailerLoading","campaignMailerHasLoaded","setCampaignMailerHasLoaded","campaignMailerError","setCampaignMailerError","pageDataLoading","setPageDataLoading","pageDataHasLoaded","setPageDataHasLoaded","pageDataError","setPageDataError","fetchData","fallbackAttempts","totalAttempts","requestRetries","setContext","fallback","bail","attempt","isFallbackAttempt","maxTimeout","requestTimeout","retries","result","Email","optoutType","submit","sms","preference","showAd","collectFeedback","optoutAdRatio","sourceClientId","undefined","SMS","wasRedirectedToAds","onRetry","error","captureException","console","loading","hasLoaded","fatalError"],"mappings":"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","sourcesContent":["import { ReactNode, useCallback, useEffect, useState } from 'react'\nimport retry from 'async-retry'\nimport * as Sentry from '@sentry/browser'\nimport { useAppContext } from '../../contexts/AppContext'\nimport {\n  CampaignMailer,\n  OptoutType,\n  PageData,\n  ServerUnavailableError\n} from '../../contracts'\nimport { verifyKey } from '../../services/legacy'\nimport { fetchPageData, submitOptout } from '../../services/optout'\nimport config from '../../config'\nimport NotFound from '../common/NotFound'\nimport { generateDefaultPageData } from '../../utils'\nimport { fallbackToApiProxy } from '../../initAxios'\n\nconst CREATIVE_COLLECTION_RATIO = 0.4\n\n/**\n * Calculate whether to collect creative feedback for an email address.\n * This is deterministic.\n */\nconst whetherCollect = (email: string) => {\n  const [name, org] = email.split('@')\n  if (!org.match(/^(yahoo|gmail|hotmail|live|aol|optestmo)/i)) {\n    return false\n  }\n  if (name === 'testclb') {\n    return true\n  }\n  if (name === 'testnotclb') {\n    return false\n  }\n\n  // Non-deterministic. Use shortcut email names above for testing.\n  return Math.random() < CREATIVE_COLLECTION_RATIO\n}\n\n/**\n * Calculate whether we should redirect to ads.\n * This is not deterministic.\n */\nexport const whetherShowAd = (ratio: number) => {\n  return Math.random() < ratio\n}\n\n/**\n * As a last resort, capture an attempted Opt-Out to Sentry. At the very least we\n * will have the optout and the key (MAK). If the CampaignMailer was fetched, we\n * will have all the data required to easily replay the Opt-Out.\n */\nconst captureFailedSubmissionToSentry = (\n  key: string,\n  message: string,\n  emailOptout?: string,\n  smsOptout?: string,\n  campaignId?: number,\n  mailerId?: number,\n  cmaId?: number\n) => {\n  Sentry.captureMessage(`Sentry Opt-Out Collection - ${message}`, {\n    contexts: {\n      'attempted optout': {\n        emailOptout,\n        smsOptout,\n        key,\n        campaignId,\n        mailerId,\n        cmaId\n      }\n    }\n  })\n}\n\nexport interface LandingDataResult {\n  /**\n   * Is the critical path data being loaded?\n   * @default false\n   */\n  loading: boolean\n\n  /**\n   * Has critical path data finished loading? If so, it may have failed or succeeded.\n   * @default false\n   */\n  hasLoaded: boolean\n\n  /**\n   * Was there a fatal error loading the critical path data? This will block rendering\n   * and will not fallback to a basic form.\n   * Note, this will not be set if there was an error submitting the opt-out, the\n   * consumer doesn't need to know about that as it is handled silently.\n   */\n  fatalError: ReactNode\n\n  /**\n   * Is the opt-out being submitted?\n   */\n  submitting: boolean\n\n  /**\n   * If the CampaignMailer has been loaded, it is available here.\n   * Technically it will also be available via `useAppContext()`, but it's also\n   * here for convenience.\n   */\n  campaignMailer: CampaignMailer | undefined\n\n  /**\n   * If the PageData has been loaded, it is available here.\n   * Technically it will also be available via `useAppContext()`, but it's also\n   * here for convenience.\n   */\n  pageData: PageData | undefined\n\n  /**\n   * Submit an Opt-Out to the API for processing. If the submission fails the error\n   * is handled silently, but logged to Sentry.\n   * The consumer is responsible for taking action afterwards i.e. redirecting to\n   * the confirmation page.\n   */\n  submitOptout: (\n    email: string,\n    sms: string,\n    preference: number[]\n  ) => Promise<{\n    showAd: boolean\n    collectFeedback: boolean\n  }>\n}\n\n/**\n * Hook extracting data fetching/saving logic to improve the readability of\n * the <Landing /> component.\n * Technically any component can use this if it has access to a key (MAK).\n */\nexport const useLandingData = (key: string): LandingDataResult => {\n  const { campaignMailer, pageData, setCampaignMailer, setPageData } =\n    useAppContext()\n  const [submitting, setSubmitting] = useState(false)\n  const [campaignMailerLoading, setCampaignMailerLoading] = useState(false)\n  const [campaignMailerHasLoaded, setCampaignMailerHasLoaded] = useState(false)\n  const [campaignMailerError, setCampaignMailerError] = useState<ReactNode>()\n  const [pageDataLoading, setPageDataLoading] = useState(false)\n  const [pageDataHasLoaded, setPageDataHasLoaded] = useState(false)\n  const [pageDataError, setPageDataError] = useState<ReactNode>()\n\n  useEffect(() => {\n    if (campaignMailer) {\n      setCampaignMailerHasLoaded(true)\n      return\n    }\n\n    const fetchData = async () => {\n      setCampaignMailerLoading(true)\n      const fallbackAttempts = 3\n      const totalAttempts = config.requestRetries + fallbackAttempts\n      Sentry.setContext('api_fallback', {\n        fallback: false\n      })\n\n      try {\n        const result = await retry(\n          async (bail, attempt) => {\n            // 'attempt' is indexed from 1\n            const isFallbackAttempt = attempt > config.requestRetries\n            if (isFallbackAttempt) {\n              fallbackToApiProxy()\n              Sentry.setContext('api_fallback', {\n                fallback: true\n              })\n            }\n\n            try {\n              return await verifyKey(key)\n            } catch (error) {\n\n              // For \"fatal\" 4xx range errors, we don't need to retry.\n              if (!(error instanceof ServerUnavailableError)) {\n                bail(error as Error)\n                return\n              }\n\n              throw error\n            }\n          },\n          {\n            maxTimeout: config.requestTimeout,\n            retries: totalAttempts\n          }\n        )\n\n        if (result) {\n          setCampaignMailer(result)\n        }\n      } catch (error) {\n        if (!(error instanceof ServerUnavailableError)) {\n          setCampaignMailerError(<NotFound />)\n        }\n      } finally {\n        setCampaignMailerLoading(false)\n        setCampaignMailerHasLoaded(true)\n      }\n    }\n\n    fetchData()\n  }, [key, campaignMailer, setCampaignMailer])\n\n  useEffect(() => {\n    if (pageData) {\n      setPageDataHasLoaded(true)\n      return\n    }\n\n    /* This request is dependant on the Campaign Mailer token. We need to wait for\n    it to either load and succeed, or fail so we can fall back to default page data. */\n    if (!campaignMailerHasLoaded) {\n      return\n    }\n\n    if (!campaignMailer) {\n      // Without a Campaign Mailer we default to Email optouts.\n      setPageData(generateDefaultPageData(OptoutType.Email))\n      setPageDataHasLoaded(true)\n      return\n    }\n\n    const fetchData = async () => {\n      setPageDataLoading(true)\n\n      try {\n        const result = await fetchPageData(\n          campaignMailer.campaignId,\n          campaignMailer.optoutType\n        )\n        setPageData(result)\n      } catch (error) {\n        setPageDataError('This opt-out link is no longer active')\n      } finally {\n        setPageDataLoading(false)\n        setPageDataHasLoaded(true)\n      }\n    }\n\n    fetchData()\n  }, [campaignMailer, campaignMailerHasLoaded, pageData, setPageData])\n\n  const submit = useCallback(\n    async (email: string, sms: string, preference: number[]) => {\n      setSubmitting(true)\n\n      if (!campaignMailer) {\n        /* If the Campaign Mailer has failed to load, immediately fall back capturing\n        the opt-out via Sentry. We cannot use submitOptout() as the contract expects\n        data we cannot provide. */\n        captureFailedSubmissionToSentry(\n          key,\n          'Opt-Out key failed to load',\n          // Without a Campaign Mailer we are assumed to be collecting Email addresses.\n          email\n        )\n\n        return {\n          showAd: false,\n          collectFeedback: false\n        }\n      }\n\n      const {\n        campaignId,\n        mailerId,\n        cmaId,\n        optoutAdRatio,\n        sourceClientId,\n        optoutType\n      } = campaignMailer\n      const showAd = whetherShowAd(optoutAdRatio)\n\n      try {\n        await retry(\n          async () => {\n            await submitOptout(campaignId, {\n              mailerId,\n              email: optoutType === OptoutType.Email ? email : undefined,\n              sms: optoutType === OptoutType.SMS ? sms : undefined,\n              cmaId,\n              preference,\n              sourceClientId,\n              wasRedirectedToAds: showAd\n            })\n          },\n          {\n            maxTimeout: config.requestTimeout,\n            retries: config.requestRetries,\n            onRetry: error => {\n              Sentry.captureException(error)\n            }\n          }\n        )\n      } catch (error) {\n        /* From the user's point of view an optout request will ALWAYS succeed i.e.\n        errors are handled silently. */\n        console.error(error)\n        Sentry.captureException(error)\n        captureFailedSubmissionToSentry(\n          key,\n          'submitOptout() failed to complete request',\n          email,\n          sms,\n          campaignId,\n          mailerId,\n          cmaId\n        )\n      } finally {\n        setSubmitting(false)\n      }\n\n      const collectFeedback =\n        !showAd && optoutType === OptoutType.Email && whetherCollect(email)\n\n      return {\n        showAd,\n        collectFeedback\n      }\n    },\n    [key, campaignMailer]\n  )\n\n  return {\n    loading: campaignMailerLoading || pageDataLoading,\n    hasLoaded: campaignMailerHasLoaded && pageDataHasLoaded,\n    // Campaign Mailer error takes precedence over a Page Data error.\n    fatalError: campaignMailerError || pageDataError,\n    submitting,\n    campaignMailer,\n    pageData,\n    submitOptout: submit\n  }\n}\n"]},"metadata":{},"sourceType":"module"}