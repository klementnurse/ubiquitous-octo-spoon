{"ast":null,"code":"/**\n * React and the browser integrated Google Translate (extension or built-in to Chrome\n * Mobile) do not play nicely together. Some interactions can crash the app as React\n * is expecting to manipulate DOM nodes that have been changed by Google Translate.\n * @see https://github.com/facebook/react/issues/11538\n *\n * Potential solutions are:\n *\n * 1. Wrapping all text nodes in another node. It's hard to know which text nodes\n *    are problematic, and the issue can be re-introduced by future code changes\n *    that are not aware of this issue.\n * 2. Monkey-patch Node.removeChild and Node.insertBefore. This may cause some legitimate\n *    DOM errors to be logged instead of crashing, and has some undefined but small\n *    performance impact. Regardless, this method has been generally accepted as\n *    the recommended solution and was proposed by Dan Abramov.\n *    @see https://github.com/facebook/react/issues/11538#issuecomment-417504600\n *\n * This module implements the second approach.\n */\n;\n\n(function () {\n  if (typeof Node === 'function' && Node.prototype) {\n    var originalRemoveChild = Node.prototype.removeChild;\n\n    Node.prototype.removeChild = function (child) {\n      if (child.parentNode !== this) {\n        if (console) {\n          console.error('Cannot remove a child from a different parent', child, this);\n        }\n\n        return child;\n      }\n\n      return originalRemoveChild.apply(this, [child]);\n    };\n\n    var originalInsertBefore = Node.prototype.insertBefore;\n\n    Node.prototype.insertBefore = function (newNode, referenceNode) {\n      if (referenceNode && referenceNode.parentNode !== this) {\n        if (console) {\n          console.error('Cannot insert before a reference node from a different parent', referenceNode, this);\n        }\n\n        return newNode;\n      }\n\n      return originalInsertBefore.apply(this, [newNode, referenceNode]);\n    };\n  }\n})();\n\nexport {};","map":{"version":3,"sources":["/Users/matthew/Desktop/static/app/src/monkeyPatchForGoogleTranslate.ts"],"names":["Node","prototype","originalRemoveChild","removeChild","child","parentNode","console","error","apply","originalInsertBefore","insertBefore","newNode","referenceNode"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAC,CAAC,YAAM;AACN,MAAI,OAAOA,IAAP,KAAgB,UAAhB,IAA8BA,IAAI,CAACC,SAAvC,EAAkD;AAChD,QAAMC,mBAAmB,GAAGF,IAAI,CAACC,SAAL,CAAeE,WAA3C;;AACAH,IAAAA,IAAI,CAACC,SAAL,CAAeE,WAAf,GAA6B,UAA0BC,KAA1B,EAAuC;AAClE,UAAIA,KAAK,CAACC,UAAN,KAAqB,IAAzB,EAA+B;AAC7B,YAAIC,OAAJ,EAAa;AACXA,UAAAA,OAAO,CAACC,KAAR,CACE,+CADF,EAEEH,KAFF,EAGE,IAHF;AAKD;;AACD,eAAOA,KAAP;AACD;;AACD,aAAOF,mBAAmB,CAACM,KAApB,CAA0B,IAA1B,EAAgC,CAACJ,KAAD,CAAhC,CAAP;AACD,KAZD;;AAcA,QAAMK,oBAAoB,GAAGT,IAAI,CAACC,SAAL,CAAeS,YAA5C;;AACAV,IAAAA,IAAI,CAACC,SAAL,CAAeS,YAAf,GAA8B,UAC5BC,OAD4B,EAE5BC,aAF4B,EAG5B;AACA,UAAIA,aAAa,IAAIA,aAAa,CAACP,UAAd,KAA6B,IAAlD,EAAwD;AACtD,YAAIC,OAAJ,EAAa;AACXA,UAAAA,OAAO,CAACC,KAAR,CACE,+DADF,EAEEK,aAFF,EAGE,IAHF;AAKD;;AACD,eAAOD,OAAP;AACD;;AACD,aAAOF,oBAAoB,CAACD,KAArB,CAA2B,IAA3B,EAAiC,CAACG,OAAD,EAAUC,aAAV,CAAjC,CAAP;AACD,KAfD;AAgBD;AACF,CAnCA;;AAqCD","sourcesContent":["/**\n * React and the browser integrated Google Translate (extension or built-in to Chrome\n * Mobile) do not play nicely together. Some interactions can crash the app as React\n * is expecting to manipulate DOM nodes that have been changed by Google Translate.\n * @see https://github.com/facebook/react/issues/11538\n *\n * Potential solutions are:\n *\n * 1. Wrapping all text nodes in another node. It's hard to know which text nodes\n *    are problematic, and the issue can be re-introduced by future code changes\n *    that are not aware of this issue.\n * 2. Monkey-patch Node.removeChild and Node.insertBefore. This may cause some legitimate\n *    DOM errors to be logged instead of crashing, and has some undefined but small\n *    performance impact. Regardless, this method has been generally accepted as\n *    the recommended solution and was proposed by Dan Abramov.\n *    @see https://github.com/facebook/react/issues/11538#issuecomment-417504600\n *\n * This module implements the second approach.\n */\n;(() => {\n  if (typeof Node === 'function' && Node.prototype) {\n    const originalRemoveChild = Node.prototype.removeChild\n    Node.prototype.removeChild = function <T extends Node>(child: T): T {\n      if (child.parentNode !== this) {\n        if (console) {\n          console.error(\n            'Cannot remove a child from a different parent',\n            child,\n            this\n          )\n        }\n        return child\n      }\n      return originalRemoveChild.apply(this, [child]) as T\n    }\n\n    const originalInsertBefore = Node.prototype.insertBefore\n    Node.prototype.insertBefore = function <T extends Node>(\n      newNode: T,\n      referenceNode: Node | null\n    ) {\n      if (referenceNode && referenceNode.parentNode !== this) {\n        if (console) {\n          console.error(\n            'Cannot insert before a reference node from a different parent',\n            referenceNode,\n            this\n          )\n        }\n        return newNode\n      }\n      return originalInsertBefore.apply(this, [newNode, referenceNode]) as T\n    }\n  }\n})()\n\nexport {}\n"]},"metadata":{},"sourceType":"module"}