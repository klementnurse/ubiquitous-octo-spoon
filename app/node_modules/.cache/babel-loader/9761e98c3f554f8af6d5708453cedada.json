{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/matthew/Desktop/static/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport { toCamelCase } from './to-camel-case';\n/**\n * convert semicolon-separated string to object\n */\n\nexport var cssToJS = function cssToJS(s) {\n  if (!s) {\n    return {};\n  }\n\n  var rules = s.split(/;/);\n  var ret = {};\n\n  var _iterator = _createForOfIteratorHelper(rules),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var rule = _step.value;\n      var idx = rule.indexOf(':');\n\n      if (idx === -1) {\n        continue;\n      }\n\n      var name = rule.substring(0, idx);\n      var k = toCamelCase(name.trim());\n      var v = rule.substring(idx + 1);\n\n      if (k === '') {\n        continue;\n      }\n\n      ret[k] = v.trim();\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return ret;\n};","map":{"version":3,"sources":["/Users/matthew/Desktop/static/app/src/utils/css-to-js.ts"],"names":["toCamelCase","cssToJS","s","rules","split","ret","rule","idx","indexOf","name","substring","k","trim","v"],"mappings":";AAAA,SAASA,WAAT,QAA4B,iBAA5B;AAEA;AACA;AACA;;AACA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,CAAD,EAAgB;AACrC,MAAI,CAACA,CAAL,EAAQ;AACN,WAAO,EAAP;AACD;;AACD,MAAMC,KAAK,GAAGD,CAAC,CAACE,KAAF,CAAQ,GAAR,CAAd;AACA,MAAMC,GAA2B,GAAG,EAApC;;AALqC,6CAMlBF,KANkB;AAAA;;AAAA;AAMrC,wDAA0B;AAAA,UAAfG,IAAe;AACxB,UAAMC,GAAG,GAAGD,IAAI,CAACE,OAAL,CAAa,GAAb,CAAZ;;AACA,UAAID,GAAG,KAAK,CAAC,CAAb,EAAgB;AACd;AACD;;AACD,UAAME,IAAI,GAAGH,IAAI,CAACI,SAAL,CAAe,CAAf,EAAkBH,GAAlB,CAAb;AACA,UAAMI,CAAC,GAAGX,WAAW,CAACS,IAAI,CAACG,IAAL,EAAD,CAArB;AACA,UAAMC,CAAC,GAAGP,IAAI,CAACI,SAAL,CAAeH,GAAG,GAAG,CAArB,CAAV;;AACA,UAAII,CAAC,KAAK,EAAV,EAAc;AACZ;AACD;;AACDN,MAAAA,GAAG,CAACM,CAAD,CAAH,GAASE,CAAC,CAACD,IAAF,EAAT;AACD;AAlBoC;AAAA;AAAA;AAAA;AAAA;;AAmBrC,SAAOP,GAAP;AACD,CApBM","sourcesContent":["import { toCamelCase } from './to-camel-case'\n\n/**\n * convert semicolon-separated string to object\n */\nexport const cssToJS = (s?: string) => {\n  if (!s) {\n    return {}\n  }\n  const rules = s.split(/;/)\n  const ret: Record<string, string> = {}\n  for (const rule of rules) {\n    const idx = rule.indexOf(':')\n    if (idx === -1) {\n      continue\n    }\n    const name = rule.substring(0, idx)\n    const k = toCamelCase(name.trim())\n    const v = rule.substring(idx + 1)\n    if (k === '') {\n      continue\n    }\n    ret[k] = v.trim()\n  }\n  return ret\n}\n"]},"metadata":{},"sourceType":"module"}