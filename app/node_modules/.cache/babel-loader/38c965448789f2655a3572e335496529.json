{"ast":null,"code":"var _jsxFileName = \"/Users/matthew/Desktop/optizmo/webapp/app/src/components/landing/PreferenceSelection.tsx\",\n    _this = this;\n\nimport React from 'react';\nimport { Input, FormGroup, Label, Alert } from 'reactstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\n/**\n * For group lists that support it, allow the user to select a number of collection\n * lists (Preferences) to be unsubscribed from.\n */\nvar PreferenceSelection = function PreferenceSelection(_ref) {\n  var preference = _ref.preference,\n      _ref$preferenceOption = _ref.preferenceOptions,\n      preferenceOptions = _ref$preferenceOption === void 0 ? [] : _ref$preferenceOption,\n      showAlert = _ref.showAlert,\n      onPreferenceSelected = _ref.onPreferenceSelected;\n  var defaultOption = {\n    id: 0,\n    name: 'Unsubscribe from all lists',\n    all: true\n  };\n\n  var handleOptionChange = function handleOptionChange(option, checked) {\n    if (option.all) {\n      if (checked) {\n        onPreferenceSelected(preferenceOptions.map(function (option) {\n          return option.id;\n        }));\n      } else {\n        onPreferenceSelected([]);\n      }\n    } else {\n      if (checked) {\n        onPreferenceSelected(preference.concat(option.id));\n      } else {\n        onPreferenceSelected(preference.filter(function (id) {\n          return id !== option.id;\n        }));\n      }\n    }\n  };\n\n  var renderOption = function renderOption(option) {\n    var id = option.id,\n        name = option.name,\n        all = option.all;\n    var checked = all ? preference.length === preferenceOptions.length : preference.includes(id);\n    return /*#__PURE__*/_jsxDEV(FormGroup, {\n      check: true,\n      children: /*#__PURE__*/_jsxDEV(Label, {\n        check: true,\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          type: \"checkbox\",\n          onChange: function onChange(event) {\n            return handleOptionChange(option, event.target.checked);\n          },\n          checked: checked\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, _this), ' ', all ? /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 18\n        }, _this) : name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, _this)\n    }, option.id || 'all', false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, _this);\n  };\n\n  if (!preferenceOptions.length) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n      children: \"Which emails would you like to unsubscribe from?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, _this), showAlert && /*#__PURE__*/_jsxDEV(Alert, {\n      color: \"danger\",\n      children: \"Please select a list to unsubscribe from\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, _this), preferenceOptions.map(function (option) {\n      return renderOption(option);\n    }), renderOption(defaultOption)]\n  }, void 0, true);\n};\n\n_c = PreferenceSelection;\nexport default PreferenceSelection;\n\nvar _c;\n\n$RefreshReg$(_c, \"PreferenceSelection\");","map":{"version":3,"sources":["/Users/matthew/Desktop/optizmo/webapp/app/src/components/landing/PreferenceSelection.tsx"],"names":["React","Input","FormGroup","Label","Alert","PreferenceSelection","preference","preferenceOptions","showAlert","onPreferenceSelected","defaultOption","id","name","all","handleOptionChange","option","checked","map","concat","filter","renderOption","length","includes","event","target"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,SAAhB,EAA2BC,KAA3B,EAAkCC,KAAlC,QAA+C,YAA/C;;;;AAyBA;AACA;AACA;AACA;AACA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,OAKI;AAAA,MAJ9BC,UAI8B,QAJ9BA,UAI8B;AAAA,mCAH9BC,iBAG8B;AAAA,MAH9BA,iBAG8B,sCAHV,EAGU;AAAA,MAF9BC,SAE8B,QAF9BA,SAE8B;AAAA,MAD9BC,oBAC8B,QAD9BA,oBAC8B;AAK9B,MAAMC,aAAsC,GAAG;AAC7CC,IAAAA,EAAE,EAAE,CADyC;AAE7CC,IAAAA,IAAI,EAAE,4BAFuC;AAG7CC,IAAAA,GAAG,EAAE;AAHwC,GAA/C;;AAMA,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CACzBC,MADyB,EAEzBC,OAFyB,EAGtB;AACH,QAAID,MAAM,CAACF,GAAX,EAAgB;AACd,UAAIG,OAAJ,EAAa;AACXP,QAAAA,oBAAoB,CAACF,iBAAiB,CAACU,GAAlB,CAAsB,UAAAF,MAAM;AAAA,iBAAIA,MAAM,CAACJ,EAAX;AAAA,SAA5B,CAAD,CAApB;AACD,OAFD,MAEO;AACLF,QAAAA,oBAAoB,CAAC,EAAD,CAApB;AACD;AACF,KAND,MAMO;AACL,UAAIO,OAAJ,EAAa;AACXP,QAAAA,oBAAoB,CAACH,UAAU,CAACY,MAAX,CAAkBH,MAAM,CAACJ,EAAzB,CAAD,CAApB;AACD,OAFD,MAEO;AACLF,QAAAA,oBAAoB,CAACH,UAAU,CAACa,MAAX,CAAkB,UAAAR,EAAE;AAAA,iBAAIA,EAAE,KAAKI,MAAM,CAACJ,EAAlB;AAAA,SAApB,CAAD,CAApB;AACD;AACF;AACF,GAjBD;;AAmBA,MAAMS,YAAY,GAAG,SAAfA,YAAe,CAACL,MAAD,EAAqC;AACxD,QAAQJ,EAAR,GAA0BI,MAA1B,CAAQJ,EAAR;AAAA,QAAYC,IAAZ,GAA0BG,MAA1B,CAAYH,IAAZ;AAAA,QAAkBC,GAAlB,GAA0BE,MAA1B,CAAkBF,GAAlB;AAEA,QAAIG,OAAO,GAAGH,GAAG,GACbP,UAAU,CAACe,MAAX,KAAsBd,iBAAiB,CAACc,MAD3B,GAEbf,UAAU,CAACgB,QAAX,CAAoBX,EAApB,CAFJ;AAIA,wBACE,QAAC,SAAD;AAAW,MAAA,KAAK,MAAhB;AAAA,6BACE,QAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAA,gCACE,QAAC,KAAD;AACE,UAAA,IAAI,EAAC,UADP;AAEE,UAAA,QAAQ,EAAE,kBAACY,KAAD;AAAA,mBACRT,kBAAkB,CAACC,MAAD,EAASQ,KAAK,CAACC,MAAN,CAAaR,OAAtB,CADV;AAAA,WAFZ;AAKE,UAAA,OAAO,EAAEA;AALX;AAAA;AAAA;AAAA;AAAA,iBADF,EAOK,GAPL,EAQGH,GAAG,gBAAG;AAAA,oBAASD;AAAT;AAAA;AAAA;AAAA;AAAA,iBAAH,GAA6BA,IARnC;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,OAAsBG,MAAM,CAACJ,EAAP,IAAa,KAAnC;AAAA;AAAA;AAAA;AAAA,aADF;AAcD,GArBD;;AAuBA,MAAI,CAACJ,iBAAiB,CAACc,MAAvB,EAA+B;AAC7B,WAAO,IAAP;AACD;;AAED,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EAGGb,SAAS,iBACR,QAAC,KAAD;AAAO,MAAA,KAAK,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAJJ,EAOGD,iBAAiB,CAACU,GAAlB,CAAsB,UAAAF,MAAM;AAAA,aAAIK,YAAY,CAACL,MAAD,CAAhB;AAAA,KAA5B,CAPH,EASGK,YAAY,CAACV,aAAD,CATf;AAAA,kBADF;AAaD,CA3ED;;KAAML,mB;AA6EN,eAAeA,mBAAf","sourcesContent":["import React from 'react'\nimport { Input, FormGroup, Label, Alert } from 'reactstrap'\nimport { PreferenceOption } from '../../contracts'\n\nexport interface PreferenceSelectionProps {\n  /**\n   * List of selected preference IDs.\n   */\n  preference: number[]\n\n  /**\n   * List of available preferences.\n   */\n  preferenceOptions?: PreferenceOption[]\n\n  /**\n   * Display a notice informing the user that they should select a preference.\n   */\n  showAlert: boolean\n\n  /**\n   * Callback when a user changes their list of preferences.\n   */\n  onPreferenceSelected(newPreference: number[]): void\n}\n\n/**\n * For group lists that support it, allow the user to select a number of collection\n * lists (Preferences) to be unsubscribed from.\n */\nconst PreferenceSelection = ({\n  preference,\n  preferenceOptions = [],\n  showAlert,\n  onPreferenceSelected\n}: PreferenceSelectionProps) => {\n  /* Preference type with custom \"all\" field to signify rendering the\n  \"Unsubscribe from all lists\" option. */\n  type PreferenceOptionWithAll = PreferenceOption & { all?: boolean }\n\n  const defaultOption: PreferenceOptionWithAll = {\n    id: 0,\n    name: 'Unsubscribe from all lists',\n    all: true\n  }\n\n  const handleOptionChange = (\n    option: PreferenceOptionWithAll,\n    checked: boolean\n  ) => {\n    if (option.all) {\n      if (checked) {\n        onPreferenceSelected(preferenceOptions.map(option => option.id))\n      } else {\n        onPreferenceSelected([])\n      }\n    } else {\n      if (checked) {\n        onPreferenceSelected(preference.concat(option.id))\n      } else {\n        onPreferenceSelected(preference.filter(id => id !== option.id))\n      }\n    }\n  }\n\n  const renderOption = (option: PreferenceOptionWithAll) => {\n    const { id, name, all } = option\n\n    let checked = all\n      ? preference.length === preferenceOptions.length\n      : preference.includes(id)\n\n    return (\n      <FormGroup check key={option.id || 'all'}>\n        <Label check>\n          <Input\n            type='checkbox'\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n              handleOptionChange(option, event.target.checked)\n            }\n            checked={checked}\n          />{' '}\n          {all ? <strong>{name}</strong> : name}\n        </Label>\n      </FormGroup>\n    )\n  }\n\n  if (!preferenceOptions.length) {\n    return null\n  }\n\n  return (\n    <>\n      <h6>Which emails would you like to unsubscribe from?</h6>\n\n      {showAlert && (\n        <Alert color='danger'>Please select a list to unsubscribe from</Alert>\n      )}\n\n      {preferenceOptions.map(option => renderOption(option))}\n\n      {renderOption(defaultOption)}\n    </>\n  )\n}\n\nexport default PreferenceSelection\n"]},"metadata":{},"sourceType":"module"}