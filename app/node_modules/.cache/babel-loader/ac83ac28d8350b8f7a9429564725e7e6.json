{"ast":null,"code":"var _jsxFileName = \"/Users/matthew/Desktop/static/app/src/index.tsx\";\n\n/* START import + polyfills required for IE11. Do not change the order of these\nunless you have researched CRA + IE11 support. */\n\n/** @jsxRuntime classic */\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport React from 'react';\n/* END import + polyfills required for IE11. */\n\nimport * as Sentry from '@sentry/browser';\nvar environment = process.env.REACT_APP_TARGET_ENV || 'development';\nvar releaseVersion = process.env.REACT_APP_RELEASE_VERSION || process.env.npm_package_version || 'UNVERSIONED';\nSentry.init({\n  dsn: 'https://6c20ba397902400f9d47007cf6200a24@sentry.io/1314267',\n  environment: environment,\n  ignoreErrors: [// https://optizmo.atlassian.net/browse/DEV-3858\n  /TypeError: null is not an object \\(evaluating '.\\.title'\\)/, // https://optizmo.atlassian.net/browse/DEV-4161\n  /window.webkit.messageHandlers/, // https://optizmo.atlassian.net/browse/DEV-4161\n  /ceCurrentVideo.currentTime/, // https://optizmo.atlassian.net/browse/DEV-4163\n  /docs-homescreen-gb-container/, // https://optizmo.atlassian.net/browse/DEV-4729\n  /Non-Error promise rejection captured with value: Object Not Found Matching Id/],\n  beforeSend: function beforeSend(event, hint) {\n    var _event$exception;\n\n    // https://optizmo.atlassian.net/browse/DEV-4500\n    if (((_event$exception = event.exception) === null || _event$exception === void 0 ? void 0 : _event$exception.values) && event.exception.values.find(function (exception) {\n      return exception.value && /Non-Error promise rejection captured with value/i.test(exception.value);\n    }) && !(hint === null || hint === void 0 ? void 0 : hint.originalException)) {\n      /* Unhandled promise rejection without a properly formatted Error. Reporting\n      this to Sentry does not help us identify issues. */\n      return null;\n    }\n    /* Sentry recommends adding a sample rate to error events to reduce the quota\n    impact of new errors.\n    The `sampleRate` SDK configuration option isn't good enough because it applies\n    globally across all captured events/messages. We need some messages to be always\n    sent as they are critical to data recovery.\n    @see https://docs.sentry.io/platforms/javascript/configuration/sampling/ */\n    // https://optizmo.atlassian.net/browse/DEV-5048\n\n\n    if (event.message && /^Sentry Opt-Out Collection/i.test(event.message)) {\n      return event;\n    } // 3 in 4 events are discarded in a non-deterministic way.\n\n\n    var shouldDiscardEvent = Math.random() > 0.25;\n\n    if (shouldDiscardEvent) {\n      return null;\n    } // Everything else is sent.\n\n\n    return event;\n  },\n  whitelistUrls: process.env.REACT_APP_TARGET_ENV === 'production' ? [/ds2r9mr2r4h38\\.cloudfront\\.net/] : undefined,\n  release: releaseVersion\n});\n/* eslint-disable import/first -- We want to initialise Sentry first to catch errors in sub-modules. */\n\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport App from './components/App';\nimport { initAxios } from './initAxios';\ninitAxios();\nimport './monkeyPatchForGoogleTranslate';\nimport './index.css';\n/* eslint-enable import/first */\n\nReactDOM.render( /*#__PURE__*/React.createElement(React.StrictMode, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(Router, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 7\n  }\n}))), document.getElementById('root'));","map":{"version":3,"sources":["/Users/matthew/Desktop/static/app/src/index.tsx"],"names":["React","Sentry","environment","process","env","REACT_APP_TARGET_ENV","releaseVersion","REACT_APP_RELEASE_VERSION","npm_package_version","init","dsn","ignoreErrors","beforeSend","event","hint","exception","values","find","value","test","originalException","message","shouldDiscardEvent","Math","random","whitelistUrls","undefined","release","ReactDOM","BrowserRouter","Router","App","initAxios","render","document","getElementById"],"mappings":";;AAAA;AACA;;AACA;AACA,OAAO,yBAAP;AACA,OAAO,2BAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA;;AACA,OAAO,KAAKC,MAAZ,MAAwB,iBAAxB;AAEA,IAAMC,WAAW,GAAGC,OAAO,CAACC,GAAR,CAAYC,oBAAZ,IAAoC,aAAxD;AACA,IAAMC,cAAc,GAClBH,OAAO,CAACC,GAAR,CAAYG,yBAAZ,IACAJ,OAAO,CAACC,GAAR,CAAYI,mBADZ,IAEA,aAHF;AAKAP,MAAM,CAACQ,IAAP,CAAY;AACVC,EAAAA,GAAG,EAAE,4DADK;AAEVR,EAAAA,WAAW,EAAXA,WAFU;AAGVS,EAAAA,YAAY,EAAE,CACZ;AACA,8DAFY,EAGZ;AACA,iCAJY,EAKZ;AACA,8BANY,EAOZ;AACA,gCARY,EASZ;AACA,iFAVY,CAHJ;AAeVC,EAAAA,UAfU,sBAeCC,KAfD,EAeQC,IAfR,EAec;AAAA;;AACtB;AACA,QACE,qBAAAD,KAAK,CAACE,SAAN,sEAAiBC,MAAjB,KACAH,KAAK,CAACE,SAAN,CAAgBC,MAAhB,CAAuBC,IAAvB,CACE,UAAAF,SAAS;AAAA,aACPA,SAAS,CAACG,KAAV,IACA,mDAAmDC,IAAnD,CACEJ,SAAS,CAACG,KADZ,CAFO;AAAA,KADX,CADA,IAQA,EAACJ,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEM,iBAAP,CATF,EAUE;AACA;AACN;AACM,aAAO,IAAP;AACD;AAED;AACJ;AACA;AACA;AACA;AACA;AACI;;;AACA,QAAIP,KAAK,CAACQ,OAAN,IAAiB,8BAA8BF,IAA9B,CAAmCN,KAAK,CAACQ,OAAzC,CAArB,EAAwE;AACtE,aAAOR,KAAP;AACD,KA3BqB,CA6BtB;;;AACA,QAAMS,kBAAkB,GAAGC,IAAI,CAACC,MAAL,KAAgB,IAA3C;;AACA,QAAIF,kBAAJ,EAAwB;AACtB,aAAO,IAAP;AACD,KAjCqB,CAmCtB;;;AACA,WAAOT,KAAP;AACD,GApDS;AAqDVY,EAAAA,aAAa,EACXtB,OAAO,CAACC,GAAR,CAAYC,oBAAZ,KAAqC,YAArC,GACI,CAAC,gCAAD,CADJ,GAEIqB,SAxDI;AAyDVC,EAAAA,OAAO,EAAErB;AAzDC,CAAZ;AA4DA;;AACA,OAAOsB,QAAP,MAAqB,WAArB;AACA,SAASC,aAAa,IAAIC,MAA1B,QAAwC,kBAAxC;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACAA,SAAS;AACT,OAAO,iCAAP;AACA,OAAO,aAAP;AACA;;AAEAJ,QAAQ,CAACK,MAAT,eACE,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADF,CADF,EAMEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CANF","sourcesContent":["/* START import + polyfills required for IE11. Do not change the order of these\nunless you have researched CRA + IE11 support. */\n/** @jsxRuntime classic */\nimport 'react-app-polyfill/ie11'\nimport 'react-app-polyfill/stable'\nimport React from 'react'\n/* END import + polyfills required for IE11. */\nimport * as Sentry from '@sentry/browser'\n\nconst environment = process.env.REACT_APP_TARGET_ENV || 'development'\nconst releaseVersion =\n  process.env.REACT_APP_RELEASE_VERSION ||\n  process.env.npm_package_version ||\n  'UNVERSIONED'\n\nSentry.init({\n  dsn: 'https://6c20ba397902400f9d47007cf6200a24@sentry.io/1314267',\n  environment,\n  ignoreErrors: [\n    // https://optizmo.atlassian.net/browse/DEV-3858\n    /TypeError: null is not an object \\(evaluating '.\\.title'\\)/,\n    // https://optizmo.atlassian.net/browse/DEV-4161\n    /window.webkit.messageHandlers/,\n    // https://optizmo.atlassian.net/browse/DEV-4161\n    /ceCurrentVideo.currentTime/,\n    // https://optizmo.atlassian.net/browse/DEV-4163\n    /docs-homescreen-gb-container/,\n    // https://optizmo.atlassian.net/browse/DEV-4729\n    /Non-Error promise rejection captured with value: Object Not Found Matching Id/\n  ],\n  beforeSend(event, hint) {\n    // https://optizmo.atlassian.net/browse/DEV-4500\n    if (\n      event.exception?.values &&\n      event.exception.values.find(\n        exception =>\n          exception.value &&\n          /Non-Error promise rejection captured with value/i.test(\n            exception.value\n          )\n      ) &&\n      !hint?.originalException\n    ) {\n      /* Unhandled promise rejection without a properly formatted Error. Reporting\n      this to Sentry does not help us identify issues. */\n      return null\n    }\n\n    /* Sentry recommends adding a sample rate to error events to reduce the quota\n    impact of new errors.\n    The `sampleRate` SDK configuration option isn't good enough because it applies\n    globally across all captured events/messages. We need some messages to be always\n    sent as they are critical to data recovery.\n    @see https://docs.sentry.io/platforms/javascript/configuration/sampling/ */\n    // https://optizmo.atlassian.net/browse/DEV-5048\n    if (event.message && /^Sentry Opt-Out Collection/i.test(event.message)) {\n      return event\n    }\n\n    // 3 in 4 events are discarded in a non-deterministic way.\n    const shouldDiscardEvent = Math.random() > 0.25\n    if (shouldDiscardEvent) {\n      return null\n    }\n\n    // Everything else is sent.\n    return event\n  },\n  whitelistUrls:\n    process.env.REACT_APP_TARGET_ENV === 'production'\n      ? [/ds2r9mr2r4h38\\.cloudfront\\.net/]\n      : undefined,\n  release: releaseVersion\n})\n\n/* eslint-disable import/first -- We want to initialise Sentry first to catch errors in sub-modules. */\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport App from './components/App'\nimport { initAxios } from './initAxios'\ninitAxios()\nimport './monkeyPatchForGoogleTranslate'\nimport './index.css'\n/* eslint-enable import/first */\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"]},"metadata":{},"sourceType":"module"}